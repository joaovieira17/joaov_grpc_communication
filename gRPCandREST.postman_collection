{
	"info": {
		"_postman_id": "5299417a-54f7-4e03-8f33-4c4eb5232b02",
		"name": "RESTv2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17845520"
	},
	"item": [
		{
			"name": "ADMIN",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "AUTHENTICATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Joao\",\r\n  \"password\": \"passdojoao\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Get List Of Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/list",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonCategoryId= jsonData.categoryId;\r",
											"var jsonName=jsonData.name;\r",
											"pm.globals.unset(\"categoryId\");\r",
											"pm.globals.set(\"categoryId\", jsonCategoryId);\r",
											"pm.globals.unset(\"nameOfCategory\");\r",
											"pm.globals.set(\"nameOfCategory\",jsonName)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"doces\",\r\n    \"name\": \"Doces e maravilhas\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlCategory}}/category/create",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Trying to duplicate Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"There is one category with that key\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"doces\",\r\n    \"name\": \"Doces e maravilhas\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlCategory}}/category/create",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"Doces e maravilhas\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/{{categoryId}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get List Of Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(11);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/list",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"Doces e maravilhas\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/getByKey/doces",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"getByKey",
										"doces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the category exists by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existence/{{nameOfCategory}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existence",
										"{{nameOfCategory}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existenceByKey/doces",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existenceByKey",
										"doces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Category Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/delete/{{categoryId}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"delete",
										"{{categoryId}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Category that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Category Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/delete/{{categoryId}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"delete",
										"{{categoryId}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the category still exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existence/{{nameOfCategory}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existence",
										"{{nameOfCategory}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ingredients",
					"item": [
						{
							"name": "Get List Of Ingredients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/list",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Ingredient Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonIngredientId= jsonData.ingredientId;\r",
											"var jsonName=jsonData.name;\r",
											"pm.globals.unset(\"ingredientId\");\r",
											"pm.globals.set(\"ingredientId\", jsonIngredientId);\r",
											"pm.globals.unset(\"nameOfIngredient\");\r",
											"pm.globals.set(\"nameOfIngredient\",jsonName)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"atum\",\r\n    \"name\": \"Atum\",\r\n    \"categoryKey\": \"d829059c-c747-11ed-afa1-0242ac120001\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlIngredients}}/ingredient/create",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Trying to duplicate Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Ingredient Status\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"There is one ingredient with that key\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"atum\",\r\n    \"name\": \"Atum\",\r\n    \"categoryKey\": \"d829059c-c747-11ed-afa1-0242ac120001\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlIngredients}}/ingredient/create",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Ingredient Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"Atum\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/{{ingredientId}}",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"{{ingredientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Ingredient Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"Atum\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/getByKey/atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"getByKey",
										"atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existence/Atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existence",
										"Atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existenceByKey/atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existenceByKey",
										"atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Ingredient Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/delete/{{ingredientId}}",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"delete",
										"{{ingredientId}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Ingredient that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Ingredient Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/delete/{{ingredientId}}",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"delete",
										"{{ingredientId}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient still exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existence/Atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existence",
										"Atum"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sandwiches",
					"item": [
						{
							"name": "Get Catalog Of Sandwiches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwiches Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/catalog",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"catalog"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Sandwich Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonSandwichId= jsonData.sandwichId;\r",
											"var jsonSandwichPublicKey = jsonData.publicKey\r",
											"pm.globals.unset(\"sandwichId\");\r",
											"pm.globals.set(\"sandwichId\", jsonSandwichId);\r",
											"pm.globals.unset(\"sandwichPublicKey\");\r",
											"pm.globals.set(\"sandwichPublicKey\", jsonSandwichPublicKey)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"designation\": \"Basica\",\r\n    \"publicKey\": \"basic\",\r\n    \"description\": \"basica\",\r\n    \"listOfIngredients\": [\r\n        {\r\n            \"privateKey\": \"d728f1ce-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d728f552-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d7290718-c747-11ed-afa1-0242ac120001\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/create",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating DUPLICATED Sandwich Status\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"That name is already used\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"designation\": \"Basica\",\r\n    \"publicKey\": \"basic\",\r\n    \"description\": \"basica\",\r\n    \"listOfIngredients\": [\r\n        {\r\n            \"privateKey\": \"d728f1ce-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d728f552-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d7290718-c747-11ed-afa1-0242ac120001\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/create",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Catalog Of Sandwiches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwiches Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(12);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/catalog",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"catalog"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwich Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Ingredient list has 22 element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.listOfIngredients.length).to.greaterThan(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/{{sandwichId}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"{{sandwichId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Sandwich By PublicKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwich Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Ingredient list has 22 element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.listOfIngredients.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/GetByKey/{{sandwichPublicKey}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"GetByKey",
										"{{sandwichPublicKey}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the sandwich exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwich Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/existence/{{sandwichId}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"existence",
										"{{sandwichId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwich Found And Deleted\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sandwich Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/delete/{{sandwichId}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"delete",
										"{{sandwichId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Sandwich that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwich Found And Deleted\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sandwich Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/delete/{{sandwichId}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"delete",
										"{{sandwichId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the sandwich still exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwich Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/existence/{{sandwichId}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"existence",
										"{{sandwichId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "sandwichExistenceByKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwich Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/existenceByKey/bag1",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"existenceByKey",
										"bag1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews",
					"item": [
						{
							"name": "Verifying there is no reviews created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There is No error Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"My Reviews list has zero element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/myReview",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"myReview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking Existence Of Review Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Expected false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/reviewExistence",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"reviewExistence"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Sandwich Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonSandwichId= jsonData.sandwichId;\r",
											"pm.globals.unset(\"sandwichId\");\r",
											"pm.globals.set(\"sandwichId\", jsonSandwichId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"designation\": \"Pão\",\r\n    \"publicKey\": \"basic\",\r\n    \"description\": \"bom\",\r\n    \"listOfIngredients\": [\r\n        {\r\n            \"privateKey\": \"d728f1ce-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d728f552-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d7290718-c747-11ed-afa1-0242ac120001\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/create",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/{{sandwichId}}/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{sandwichId}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Reviews By Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Length of answer is more than 0\",function(){",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.greaterThan(0);",
											"});",
											"",
											"/*pm.test(\"Response time is less than 200ms\", function (){",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/reviewByLanguage/portuguese",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"reviewByLanguage",
										"portuguese"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify the review was created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"incrivel\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review by sandwichId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Reviews By Product Sku list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/reviewBySandwich/{{sandwichId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"reviewBySandwich",
										"{{sandwichId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sandwich aggregated ratings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4.0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{sandwichId}}/rating",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{sandwichId}}",
										"rating"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reviews of sandwich order by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http Status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Reviews list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{sandwichId}}/date/here",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{sandwichId}}",
										"date",
										"here"
									]
								}
							},
							"response": []
						},
						{
							"name": "All my reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There is No error Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"My Reviews list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/myReview",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"myReview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove created review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove non-existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/{{sandwichId}}/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{sandwichId}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Review (By Mod)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/delete/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"delete",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwich Found And Deleted\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sandwich Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/delete/{{sandwichId}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"delete",
										"{{sandwichId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Report",
					"item": [
						{
							"name": "Get list of reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There is No error Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"list has zero element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/list",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    var jsonProductSku= jsonData.productSku;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);\r",
											"    pm.globals.unset(\"productSku\");\r",
											"    pm.globals.set(\"productSku\", jsonProductSku);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Report Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReportId= jsonData.reportId;\r",
											"    pm.globals.unset(\"reportId\");\r",
											"    pm.globals.set(\"reportId\", jsonReportId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "Tem palavras mas",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{urlReport}}/review/report/create/{{reviewId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"create",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Report Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"Tem palavras mas\");\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userId).to.eql(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By review Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is more than 0\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/listByReview/{{reviewId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"listByReview",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Report Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/delete/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"delete",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove created review Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Votes",
					"item": [
						{
							"name": "Trying to vote in non-existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"/*lets hope this one dont exist*/\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"b9a996a2-b6c2-11ed-afa1-0242ac120002\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonReviewId= jsonData.reviewId;\r",
											"var jsonProductSku= jsonData.productSku;\r",
											"pm.globals.unset(\"reviewId\");\r",
											"pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"testVotes\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Specific review and verifying 0 upvotes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"testVotes\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});\r",
											"pm.test(\"Checking Review upVotes\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.upVotes).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying the Vote is not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Vote Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteData/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteData",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying there are no votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Expected false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteExistence/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteExistence",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Votting an existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Vote has changed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"{{reviewId}}\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Trying to duplicate vote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You have already voted on this review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"{{reviewId}}\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reviews of sandwich sorted by votes order by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http Status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Reviews list has elements,it has to be approved\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/votes",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"votes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review after Vote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"testVotes\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});\r",
											"pm.test(\"Checking Review upVotes\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.upVotes).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying there are votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Expected false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteExistence/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteExistence",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying the Vote is found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteData/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteData",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not being able to remove review due to having upVotes/downVotes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review can't be deleted because have up or down votes\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All My Votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Votes Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is 1\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/MyVotes",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"MyVotes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reservation",
					"item": [
						{
							"name": "Get Every Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"list has zero element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/list",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Reservation Status 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonReservationId= jsonData.reservationId;\r",
											"pm.globals.unset(\"reservationId\");\r",
											"pm.globals.set(\"reservationId\", jsonReservationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"pickupDate\": \"2024-06-03T00:00:00.000+00:00\",\r\n    \"itemList\": [\r\n        {\r\n            \"sandwichId\": \"d728f1ce-c747-11ed-afa1-0242ac120002\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReservation}}/reservation/create",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Every Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is 1\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/list",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All My Reservations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is 1\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/allMyReservations",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"allMyReservations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Reservation Id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reservationId).to.eql(pm.globals.get(\"reservationId\"));\r",
											"});\r",
											"pm.test(\"Checking Reservation status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"ACTIVE\");\r",
											"});\r",
											"pm.test(\"Checking List Of Items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of Non Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/listOfNonActive",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"listOfNonActive"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of Non Active Ordered By Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/listOfNonActiveOrdered",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"listOfNonActiveOrdered"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change reservation Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"STATUS 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Reservation status modified\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}/changeStatus/true",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}",
										"changeStatus",
										"true"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Reservation Id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reservationId).to.eql(pm.globals.get(\"reservationId\"));\r",
											"});\r",
											"pm.test(\"Checking Reservation status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"DELIVERED\");\r",
											"});\r",
											"pm.test(\"Checking List Of Items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"STATUS 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Reservation Canceled\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}/cancelReservation",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}",
										"cancelReservation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Reservation Id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reservationId).to.eql(pm.globals.get(\"reservationId\"));\r",
											"});\r",
											"pm.test(\"Checking Reservation status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"CANCELED\");\r",
											"});\r",
											"pm.test(\"Checking List Of Items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"STATUS 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Reservation Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/delete/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"delete",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "EMPLOYEE",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "AUTHENTICATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Joana\",\r\n  \"password\": \"passdajoana\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Get List Of Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/list",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"doces\",\r\n    \"name\": \"Doces e maravilhas\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlCategory}}/category/create",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found 200\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Category Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/getByKey/doces",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"getByKey",
										"doces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the category exists by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existence/{{nameOfCategory}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existence",
										"{{nameOfCategory}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existenceByKey/doces",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existenceByKey",
										"doces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existenceByKey/molh",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existenceByKey",
										"molh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/delete/{{categoryId}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"delete",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ingredients",
					"item": [
						{
							"name": "Get List Of Ingredients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/list",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"atum\",\r\n    \"name\": \"Atum\",\r\n    \"categoryKey\": \"d829059c-c747-11ed-afa1-0242ac120001\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlIngredients}}/ingredient/create",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found 200\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Ingredient Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/getByKey/atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"getByKey",
										"atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existence/Atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existence",
										"Atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existenceByKey/atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existenceByKey",
										"atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existenceByKey/tomat",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existenceByKey",
										"tomat"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/delete/{{ingredientId}}",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"delete",
										"{{ingredientId}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sandwiches",
					"item": [
						{
							"name": "Get Catalog Of Sandwiches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwiches Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/catalog",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"catalog"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"designation\": \"Basica\",\r\n    \"publicKey\": \"basic\",\r\n    \"description\": \"basica\",\r\n    \"listOfIngredients\": [\r\n        {\r\n            \"privateKey\": \"d728f1ce-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d728f552-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d7290718-c747-11ed-afa1-0242ac120001\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/create",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Sandwich By PublicKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/GetByKey/basic",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"GetByKey",
										"basic"
									]
								}
							},
							"response": []
						},
						{
							"name": "sandwichExistenceByKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/existenceByKey/bag1",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"existenceByKey",
										"bag1"
									]
								}
							},
							"response": []
						},
						{
							"name": "sandwichExistenceByKey Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/existenceByKey/basic",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"existenceByKey",
										"basic"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/delete/{{sandwichId}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"delete",
										"{{sandwichId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews",
					"item": [
						{
							"name": "Verifying there is no reviews created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There is No error Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"My Reviews list has zero element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/myReview",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"myReview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Reviews By Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Length of answer is more than 0\",function(){",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.greaterThan(0);",
											"});",
											"",
											"/*pm.test(\"Response time is less than 200ms\", function (){",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/reviewByLanguage/portuguese",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"reviewByLanguage",
										"portuguese"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify the review was created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"incrivel\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review by sandwichId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Reviews By Product Sku list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/reviewBySandwich/d728f1ce-c747-11ed-afa1-0242ac120002",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"reviewBySandwich",
										"d728f1ce-c747-11ed-afa1-0242ac120002"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sandwich aggregated ratings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4.0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/rating",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"rating"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reviews of sandwich order by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http Status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Reviews list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/date/here",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"date",
										"here"
									]
								}
							},
							"response": []
						},
						{
							"name": "All my reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There is No error Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"My Reviews list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/myReview",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"myReview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove created review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove non-existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Review (By Mod)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/delete/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"delete",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Report",
					"item": [
						{
							"name": "Get list of reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There is No error Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"list has zero element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/list",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    var jsonProductSku= jsonData.productSku;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);\r",
											"    pm.globals.unset(\"productSku\");\r",
											"    pm.globals.set(\"productSku\", jsonProductSku);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Report Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReportId= jsonData.reportId;\r",
											"    pm.globals.unset(\"reportId\");\r",
											"    pm.globals.set(\"reportId\", jsonReportId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "Tem palavras mas",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{urlReport}}/review/report/create/{{reviewId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"create",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Report Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"Tem palavras mas\");\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userId).to.eql(4);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By review Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is more than 0\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/listByReview/{{reviewId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"listByReview",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/delete/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"delete",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove created review Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "AUTHENTICATE Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Joao\",\r\n  \"password\": \"passdojoao\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Report Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Report Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/delete/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"delete",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AUTHENTICATE Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Joana\",\r\n  \"password\": \"passdajoana\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Votes",
					"item": [
						{
							"name": "Trying to vote in non-existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"/*lets hope this one dont exist*/\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"b9a996a2-b6c2-11ed-afa1-0242ac120002\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonReviewId= jsonData.reviewId;\r",
											"var jsonProductSku= jsonData.productSku;\r",
											"pm.globals.unset(\"reviewId\");\r",
											"pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"testVotes\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Specific review and verifying 0 upvotes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"testVotes\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});\r",
											"pm.test(\"Checking Review upVotes\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.upVotes).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying the Vote is not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Vote Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteData/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteData",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying there are no votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Expected false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteExistence/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteExistence",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Votting an existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Vote has changed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"{{reviewId}}\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Trying to duplicate vote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You have already voted on this review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"{{reviewId}}\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reviews of sandwich sorted by votes order by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http Status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Reviews list has elements,it has to be approved\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/votes",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"votes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review after Vote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"testVotes\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});\r",
											"pm.test(\"Checking Review upVotes\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.upVotes).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying there are votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Expected false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteExistence/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteExistence",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying the Vote is found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteData/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteData",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not being able to remove review due to having upVotes/downVotes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review can't be deleted because have up or down votes\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All My Votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Votes Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is 1\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/MyVotes",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"MyVotes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reservation",
					"item": [
						{
							"name": "Get Every Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"list has zero element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/list",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Reservation Status 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonReservationId= jsonData.reservationId;\r",
											"pm.globals.unset(\"reservationId\");\r",
											"pm.globals.set(\"reservationId\", jsonReservationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"pickupDate\": \"2024-06-03T00:00:00.000+00:00\",\r\n    \"itemList\": [\r\n        {\r\n            \"sandwichId\": \"d728f1ce-c747-11ed-afa1-0242ac120002\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReservation}}/reservation/create",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Every Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is 1\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/list",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All My Reservations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is 1\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/allMyReservations",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"allMyReservations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Reservation Id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reservationId).to.eql(pm.globals.get(\"reservationId\"));\r",
											"});\r",
											"pm.test(\"Checking Reservation status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"ACTIVE\");\r",
											"});\r",
											"pm.test(\"Checking List Of Items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of Non Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/listOfNonActive",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"listOfNonActive"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of Non Active Ordered By Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/listOfNonActiveOrdered",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"listOfNonActiveOrdered"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change reservation Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"STATUS 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Reservation status modified\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}/changeStatus/true",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}",
										"changeStatus",
										"true"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Reservation Id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reservationId).to.eql(pm.globals.get(\"reservationId\"));\r",
											"});\r",
											"pm.test(\"Checking Reservation status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"DELIVERED\");\r",
											"});\r",
											"pm.test(\"Checking List Of Items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"STATUS 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Reservation Canceled\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}/cancelReservation",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}",
										"cancelReservation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Reservation Id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reservationId).to.eql(pm.globals.get(\"reservationId\"));\r",
											"});\r",
											"pm.test(\"Checking Reservation status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"CANCELED\");\r",
											"});\r",
											"pm.test(\"Checking List Of Items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"STATUS 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Reservation Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/delete/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"delete",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "MODERATOR",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "AUTHENTICATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Albert\",\r\n  \"password\": \"passdoalbert\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Get List Of Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/list",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"doces\",\r\n    \"name\": \"Doces e maravilhas\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlCategory}}/category/create",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found 200\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Category Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/getByKey/doces",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"getByKey",
										"doces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the category exists by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existence/{{nameOfCategory}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existence",
										"{{nameOfCategory}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existenceByKey/doces",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existenceByKey",
										"doces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existenceByKey/molh",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existenceByKey",
										"molh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/delete/{{categoryId}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"delete",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ingredients",
					"item": [
						{
							"name": "Get List Of Ingredients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/list",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"atum\",\r\n    \"name\": \"Atum\",\r\n    \"categoryKey\": \"d829059c-c747-11ed-afa1-0242ac120001\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlIngredients}}/ingredient/create",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found 200\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Ingredient Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/getByKey/atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"getByKey",
										"atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existence/Atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existence",
										"Atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existenceByKey/atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existenceByKey",
										"atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existenceByKey/tomat",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existenceByKey",
										"tomat"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/delete/{{ingredientId}}",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"delete",
										"{{ingredientId}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sandwiches",
					"item": [
						{
							"name": "Get Catalog Of Sandwiches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwiches Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/catalog",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"catalog"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"designation\": \"Basica\",\r\n    \"publicKey\": \"basic\",\r\n    \"description\": \"basica\",\r\n    \"listOfIngredients\": [\r\n        {\r\n            \"privateKey\": \"d728f1ce-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d728f552-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d7290718-c747-11ed-afa1-0242ac120001\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/create",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Sandwich By PublicKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 204\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/GetByKey/basic",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"GetByKey",
										"basic"
									]
								}
							},
							"response": []
						},
						{
							"name": "sandwichExistenceByKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/existenceByKey/bag1",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"existenceByKey",
										"bag1"
									]
								}
							},
							"response": []
						},
						{
							"name": "sandwichExistenceByKey Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/existenceByKey/basic",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"existenceByKey",
										"basic"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/delete/{{sandwichId}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"delete",
										"{{sandwichId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews",
					"item": [
						{
							"name": "Verifying there is no reviews created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There is No error Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"My Reviews list has zero element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/myReview",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"myReview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Reviews By Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Length of answer is more than 0\",function(){",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.greaterThan(0);",
											"});",
											"",
											"/*pm.test(\"Response time is less than 200ms\", function (){",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/reviewByLanguage/portuguese",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"reviewByLanguage",
										"portuguese"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify the review was created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"incrivel\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review by sandwichId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Reviews By Product Sku list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/reviewBySandwich/d728f1ce-c747-11ed-afa1-0242ac120002",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"reviewBySandwich",
										"d728f1ce-c747-11ed-afa1-0242ac120002"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sandwich aggregated ratings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4.0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/rating",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"rating"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reviews of sandwich order by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http Status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Reviews list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/date/here",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"date",
										"here"
									]
								}
							},
							"response": []
						},
						{
							"name": "All my reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There is No error Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"My Reviews list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/myReview",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"myReview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove created review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove non-existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Review (By Mod)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/delete/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"delete",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Report",
					"item": [
						{
							"name": "Get list of reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There is No error Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"list has zero element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/list",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    var jsonProductSku= jsonData.productSku;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);\r",
											"    pm.globals.unset(\"productSku\");\r",
											"    pm.globals.set(\"productSku\", jsonProductSku);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Report Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReportId= jsonData.reportId;\r",
											"    pm.globals.unset(\"reportId\");\r",
											"    pm.globals.set(\"reportId\", jsonReportId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "Tem palavras mas",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{urlReport}}/review/report/create/{{reviewId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"create",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Report Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"Tem palavras mas\");\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userId).to.eql(5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By review Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is more than 0\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/listByReview/{{reviewId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"listByReview",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/delete/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"delete",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove created review Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "AUTHENTICATE Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Joao\",\r\n  \"password\": \"passdojoao\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Report Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Report Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/delete/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"delete",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AUTHENTICATE Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Albert\",\r\n  \"password\": \"passdoalbert\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Votes",
					"item": [
						{
							"name": "Trying to vote in non-existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"/*lets hope this one dont exist*/\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"b9a996a2-b6c2-11ed-afa1-0242ac120002\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonReviewId= jsonData.reviewId;\r",
											"var jsonProductSku= jsonData.productSku;\r",
											"pm.globals.unset(\"reviewId\");\r",
											"pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"testVotes\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Specific review and verifying 0 upvotes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"testVotes\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});\r",
											"pm.test(\"Checking Review upVotes\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.upVotes).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying the Vote is not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Vote Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteData/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteData",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying there are no votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Expected false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteExistence/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteExistence",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Votting an existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Vote has changed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"{{reviewId}}\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Trying to duplicate vote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You have already voted on this review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"{{reviewId}}\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reviews of sandwich sorted by votes order by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http Status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Reviews list has elements,it has to be approved\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/votes",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"votes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review after Vote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"testVotes\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});\r",
											"pm.test(\"Checking Review upVotes\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.upVotes).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying there are votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Expected false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteExistence/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteExistence",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying the Vote is found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteData/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteData",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not being able to remove review due to having upVotes/downVotes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review can't be deleted because have up or down votes\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All My Votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Votes Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is 1\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/MyVotes",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"MyVotes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reservation",
					"item": [
						{
							"name": "Get Every Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/list",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Reservation Status 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonReservationId= jsonData.reservationId;\r",
											"pm.globals.unset(\"reservationId\");\r",
											"pm.globals.set(\"reservationId\", jsonReservationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"pickupDate\": \"2024-06-03T00:00:00.000+00:00\",\r\n    \"itemList\": [\r\n        {\r\n            \"sandwichId\": \"d728f1ce-c747-11ed-afa1-0242ac120002\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReservation}}/reservation/create",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Every Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/list",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All My Reservations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is 1\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/allMyReservations",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"allMyReservations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get My Specific Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Reservation Id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reservationId).to.eql(pm.globals.get(\"reservationId\"));\r",
											"});\r",
											"pm.test(\"Checking Reservation status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"ACTIVE\");\r",
											"});\r",
											"pm.test(\"Checking List Of Items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/myReserv/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"myReserv",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of Non Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/listOfNonActive",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"listOfNonActive"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of Non Active Ordered By Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/listOfNonActiveOrdered",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"listOfNonActiveOrdered"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change reservation Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}/changeStatus/true",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}",
										"changeStatus",
										"true"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"STATUS 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Reservation Canceled\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}/cancelReservation",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}",
										"cancelReservation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Reservation Id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reservationId).to.eql(pm.globals.get(\"reservationId\"));\r",
											"});\r",
											"pm.test(\"Checking Reservation status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"CANCELED\");\r",
											"});\r",
											"pm.test(\"Checking List Of Items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/myReserv/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"myReserv",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/delete/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"delete",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AUTHENTICATE Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Joao\",\r\n  \"password\": \"passdojoao\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Reservation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Reservation Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/delete/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"delete",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AUTHENTICATE Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Albert\",\r\n  \"password\": \"passdoalbert\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/myReserv/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"myReserv",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "REG_USER",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "AUTHENTICATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Bruno\",\r\n  \"password\": \"passdobruno\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Get List Of Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/list",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"doces\",\r\n    \"name\": \"Doces e maravilhas\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlCategory}}/category/create",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found 200\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Category Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/getByKey/doces",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"getByKey",
										"doces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the category exists by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existence/{{nameOfCategory}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existence",
										"{{nameOfCategory}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existenceByKey/doces",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existenceByKey",
										"doces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existenceByKey/molh",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existenceByKey",
										"molh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/delete/{{categoryId}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"delete",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ingredients",
					"item": [
						{
							"name": "Get List Of Ingredients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/list",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"atum\",\r\n    \"name\": \"Atum\",\r\n    \"categoryKey\": \"d829059c-c747-11ed-afa1-0242ac120001\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlIngredients}}/ingredient/create",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found 200\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Ingredient Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/getByKey/atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"getByKey",
										"atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existence/Atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existence",
										"Atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existenceByKey/atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existenceByKey",
										"atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existenceByKey/tomat",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existenceByKey",
										"tomat"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/delete/{{ingredientId}}",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"delete",
										"{{ingredientId}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sandwiches",
					"item": [
						{
							"name": "Get Catalog Of Sandwiches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwiches Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/catalog",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"catalog"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"designation\": \"Basica\",\r\n    \"publicKey\": \"basic\",\r\n    \"description\": \"basica\",\r\n    \"listOfIngredients\": [\r\n        {\r\n            \"privateKey\": \"d728f1ce-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d728f552-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d7290718-c747-11ed-afa1-0242ac120001\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/create",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Sandwich By PublicKey",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/GetByKey/{{sandwichPublicKey}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"GetByKey",
										"{{sandwichPublicKey}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "sandwichExistenceByKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/existenceByKey/bag1",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"existenceByKey",
										"bag1"
									]
								}
							},
							"response": []
						},
						{
							"name": "sandwichExistenceByKey Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/existenceByKey/basic",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"existenceByKey",
										"basic"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Category Status 201\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/delete/{{sandwichId}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"delete",
										"{{sandwichId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews",
					"item": [
						{
							"name": "Verifying there is no reviews created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There is No error Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"My Reviews list has zero element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/myReview",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"myReview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Reviews By Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Length of answer is more than 0\",function(){",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.greaterThan(0);",
											"});",
											"",
											"/*pm.test(\"Response time is less than 200ms\", function (){",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/reviewByLanguage/portuguese",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"reviewByLanguage",
										"portuguese"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify the review was created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"incrivel\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review by sandwichId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Reviews By Product Sku list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/reviewBySandwich/d728f1ce-c747-11ed-afa1-0242ac120002",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"reviewBySandwich",
										"d728f1ce-c747-11ed-afa1-0242ac120002"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sandwich aggregated ratings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4.0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/rating",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"rating"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reviews of sandwich order by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http Status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Reviews list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/date/here",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"date",
										"here"
									]
								}
							},
							"response": []
						},
						{
							"name": "All my reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"There is No error Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"My Reviews list has at least one element\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/myReview",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"myReview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove created review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove non-existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Review (By Mod)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/delete/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"delete",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove created review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleted review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Report",
					"item": [
						{
							"name": "Get list of reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/list",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReviewId= jsonData.reviewId;\r",
											"    var jsonProductSku= jsonData.productSku;\r",
											"    pm.globals.unset(\"reviewId\");\r",
											"    pm.globals.set(\"reviewId\", jsonReviewId);\r",
											"    pm.globals.unset(\"productSku\");\r",
											"    pm.globals.set(\"productSku\", jsonProductSku);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Report Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonReportId= jsonData.reportId;\r",
											"    pm.globals.unset(\"reportId\");\r",
											"    pm.globals.set(\"reportId\", jsonReportId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "Tem palavras mas",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{urlReport}}/review/report/create/{{reviewId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"create",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By review Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/listByReview/{{reviewId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"listByReview",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/delete/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"delete",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove created review Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "AUTHENTICATE Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Joao\",\r\n  \"password\": \"passdojoao\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Report Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Report Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/delete/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"delete",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AUTHENTICATE Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Albert\",\r\n  \"password\": \"passdoalbert\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Votes",
					"item": [
						{
							"name": "Trying to vote in non-existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"/*lets hope this one dont exist*/\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"b9a996a2-b6c2-11ed-afa1-0242ac120002\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Review Status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonReviewId= jsonData.reviewId;\r",
											"var jsonProductSku= jsonData.productSku;\r",
											"pm.globals.unset(\"reviewId\");\r",
											"pm.globals.set(\"reviewId\", jsonReviewId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"testVotes\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Specific review and verifying 0 upvotes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"testVotes\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});\r",
											"pm.test(\"Checking Review upVotes\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.upVotes).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying the Vote is not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Vote Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteData/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteData",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying there are no votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Expected false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteExistence/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteExistence",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Votting an existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Vote has changed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"{{reviewId}}\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Trying to duplicate vote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status ok\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You have already voted on this review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"{{reviewId}}\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reviews of sandwich sorted by votes order by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http Status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Reviews list has elements,it has to be approved\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/votes",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"votes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review after Vote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.text).to.eql(\"testVotes\");\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});\r",
											"pm.test(\"Checking Review upVotes\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.upVotes).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying there are votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Http status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Expected false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteExistence/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteExistence",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying the Vote is found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteData/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteData",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not being able to remove review due to having upVotes/downVotes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete Status\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Review can't be deleted because have up or down votes\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All My Votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Expected Votes Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is 1\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/MyVotes",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"MyVotes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reservation",
					"item": [
						{
							"name": "Get Every Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/list",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Reservation Status 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var jsonReservationId= jsonData.reservationId;\r",
											"pm.globals.unset(\"reservationId\");\r",
											"pm.globals.set(\"reservationId\", jsonReservationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"pickupDate\": \"2024-06-03T00:00:00.000+00:00\",\r\n    \"itemList\": [\r\n        {\r\n            \"sandwichId\": \"d728f1ce-c747-11ed-afa1-0242ac120002\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReservation}}/reservation/create",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Every Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/list",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All My Reservations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Length of answer is 1\",function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/allMyReservations",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"allMyReservations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get My Specific Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Reservation Id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reservationId).to.eql(pm.globals.get(\"reservationId\"));\r",
											"});\r",
											"pm.test(\"Checking Reservation status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"ACTIVE\");\r",
											"});\r",
											"pm.test(\"Checking List Of Items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/myReserv/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"myReserv",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of Non Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/listOfNonActive",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"listOfNonActive"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of Non Active Ordered By Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/listOfNonActiveOrdered",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"listOfNonActiveOrdered"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change reservation Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}/changeStatus/true",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}",
										"changeStatus",
										"true"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"STATUS 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Reservation Canceled\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}/cancelReservation",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}",
										"cancelReservation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Reservation Id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reservationId).to.eql(pm.globals.get(\"reservationId\"));\r",
											"});\r",
											"pm.test(\"Checking Reservation status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"CANCELED\");\r",
											"});\r",
											"pm.test(\"Checking List Of Items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/myReserv/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"myReserv",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/delete/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"delete",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AUTHENTICATE Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Joao\",\r\n  \"password\": \"passdojoao\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Reservation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Reservation Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/delete/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"delete",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AUTHENTICATE Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Requesting authorization token Status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseAuth = pm.response.json();\r",
											"var tokenAuth = responseAuth.accessToken;\r",
											"pm.globals.unset(\"token\");\r",
											"pm.globals.set(\"token\", tokenAuth);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Bruno\",\r\n  \"password\": \"passdobruno\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlAuthorization}}/authenticate",
									"host": [
										"{{urlAuthorization}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/myReserv/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"myReserv",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ANONYMOUS",
			"item": [
				{
					"name": "Category",
					"item": [
						{
							"name": "Get List Of Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/list",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"You don't have authorization to do this\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"doces\",\r\n    \"name\": \"Doces e maravilhas\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlCategory}}/category/create",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found 200\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking Category Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Category Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/getByKey/doces",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"getByKey",
										"doces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the category exists by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existence/{{nameOfCategory}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existence",
										"{{nameOfCategory}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existenceByKey/doces",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existenceByKey",
										"doces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/existenceByKey/molh",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"existenceByKey",
										"molh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have authorization to do this\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlCategory}}/category/delete/{{categoryId}}",
									"host": [
										"{{urlCategory}}"
									],
									"path": [
										"category",
										"delete",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ingredients",
					"item": [
						{
							"name": "Get List Of Ingredients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/list",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publicKey\": \"atum\",\r\n    \"name\": \"Atum\",\r\n    \"categoryKey\": \"d829059c-c747-11ed-afa1-0242ac120001\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlIngredients}}/ingredient/create",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category Found 200\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Checking Name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Ingredient Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/getByKey/atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"getByKey",
										"atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existence/Atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existence",
										"Atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existenceByKey/atum",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existenceByKey",
										"atum"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify if the ingredient exists by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient Not Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/existenceByKey/tomat",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"existenceByKey",
										"tomat"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlIngredients}}/ingredient/delete/{{ingredientId}}",
									"host": [
										"{{urlIngredients}}"
									],
									"path": [
										"ingredient",
										"delete",
										"{{ingredientId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sandwiches",
					"item": [
						{
							"name": "Get Catalog Of Sandwiches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sandwiches Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"list has data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/catalog",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"catalog"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"designation\": \"Basica\",\r\n    \"publicKey\": \"basic\",\r\n    \"description\": \"basica\",\r\n    \"listOfIngredients\": [\r\n        {\r\n            \"privateKey\": \"d728f1ce-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d728f552-c747-11ed-afa1-0242ac120001\"\r\n        },\r\n        {\r\n            \"privateKey\": \"d7290718-c747-11ed-afa1-0242ac120001\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/create",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Sandwich By PublicKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/GetByKey/basic",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"GetByKey",
										"basic"
									]
								}
							},
							"response": []
						},
						{
							"name": "sandwichExistenceByKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/existenceByKey/bag1",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"existenceByKey",
										"bag1"
									]
								}
							},
							"response": []
						},
						{
							"name": "sandwichExistenceByKey Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/existenceByKey/basic",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"existenceByKey",
										"basic"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Sandwich",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"You don't have authorization to do this\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlSandwiches}}/sandwich/delete/{{sandwichId}}",
									"host": [
										"{{urlSandwiches}}"
									],
									"path": [
										"sandwich",
										"delete",
										"{{sandwichId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews",
					"item": [
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have authorization to do this\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"incrivel\",\r\n    \"rating\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReviews}}/review/{{sandwichId}}/create",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{sandwichId}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Reviews By Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"/*pm.test(\"Response time is less than 200ms\", function (){",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/reviewByLanguage/portuguese",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"reviewByLanguage",
										"portuguese"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify the review was created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Review Found\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Checking Review Rating\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.rating).to.eql(4);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review by sandwichId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/reviewBySandwich/d728f1ce-c747-11ed-afa1-0242ac120002",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"reviewBySandwich",
										"d728f1ce-c747-11ed-afa1-0242ac120002"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reviews of sandwich order by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http Status ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/d728f1ce-c747-11ed-afa1-0242ac120002/date/here",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"d728f1ce-c747-11ed-afa1-0242ac120002",
										"date",
										"here"
									]
								}
							},
							"response": []
						},
						{
							"name": "All my reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have authorization to do this\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/myReview",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"myReview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove non-existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have authorization to do this\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReviews}}/review/{{reviewId}}/remove",
									"host": [
										"{{urlReviews}}"
									],
									"path": [
										"review",
										"{{reviewId}}",
										"remove"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Report",
					"item": [
						{
							"name": "Get list of reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have authorization to do this\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/list",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have authorization to do this\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "Tem palavras mas",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{urlReport}}/review/report/create/{{reviewId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"create",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have authorization to do this\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"{{reportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By review Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have authorization to do this\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/listByReview/{{reviewId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"listByReview",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking  message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have authorization to do this\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReport}}/review/report/delete/{{reportId}}",
									"host": [
										"{{urlReport}}"
									],
									"path": [
										"review",
										"report",
										"delete",
										"{{reportId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Votes",
					"item": [
						{
							"name": "Votting an existing review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewId\": \"{{reviewId}}\",\r\n  \"vote\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlVotes}}/vote/updateVote",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"updateVote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verifying the Vote is found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"STAUTS 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/getVoteData/{{reviewId}}",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"getVoteData",
										"{{reviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All My Votes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlVotes}}/vote/MyVotes",
									"host": [
										"{{urlVotes}}"
									],
									"path": [
										"vote",
										"MyVotes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reservation",
					"item": [
						{
							"name": "Get Every Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/list",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating Reservation Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"pickupDate\": \"2024-06-03T00:00:00.000+00:00\",\r\n    \"itemList\": [\r\n        {\r\n            \"sandwichId\": \"d728f1ce-c747-11ed-afa1-0242ac120002\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlReservation}}/reservation/create",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Every Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 403\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/list",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All My Reservations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/allMyReservations",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"allMyReservations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get My Specific Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/myReserv/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"myReserv",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of Non Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/listOfNonActive",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"listOfNonActive"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of Non Active Ordered By Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/listOfNonActiveOrdered",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"listOfNonActiveOrdered"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change reservation Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}/changeStatus/true",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}",
										"changeStatus",
										"true"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"STATUS 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/{{reservationId}}/cancelReservation",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"{{reservationId}}",
										"cancelReservation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Reservation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservation 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/myReserv/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"myReserv",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\" Status 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{urlReservation}}/reservation/delete/{{reservationId}}",
									"host": [
										"{{urlReservation}}"
									],
									"path": [
										"reservation",
										"delete",
										"{{reservationId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "urlIngredients",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "urlReviews",
			"value": "http://localhost:8084",
			"type": "string"
		},
		{
			"key": "urlVotes",
			"value": "http://localhost:8085",
			"type": "string"
		},
		{
			"key": "urlSandwiches",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "urlCategory",
			"value": "http://localhost:8090",
			"type": "string"
		},
		{
			"key": "urlReservation",
			"value": "http://localhost:8091",
			"type": "string"
		},
		{
			"key": "urlAuthorization",
			"value": "http://localhost:8086",
			"type": "string"
		},
		{
			"key": "urlReport",
			"value": "http://localhost:8089",
			"type": "string"
		}
	]
}